{"version":3,"sources":["webpack:///./src/assets/js/data_plot.js","webpack:///./src/assets/js/data_process.js"],"names":["covert_rgb","hex","alpha","length","r","parseInt","substring","g","b","PlotCase","case_name","this","small_fig","width","height","medium_fig","large_fig","small_margin","t","l","medium_margin","large_margin","color_theme","plotly_config","small","displaylogo","responsive","displayModeBar","staticPlot","medium","large","editable","layout_default","margin","font","size","showlegend","autosize","legend","xanchor","yanchor","x","y","my_div","Plotly","purge","file_name","toImage","format","then","url","pom","document","createElement","href","setAttribute","click","type","fig_size","fig_margin","layout_config","Object","assign","title","update","relayout","data","color_count","trace_data","entries","index","d","push","name","chemical","autobinx","histnorm","marker","color","line","opacity","fig_layout_config","bargap","bargroupgap","barmode","xaxis","yaxis","layout","set_layout","newPlot","mode","connectgaps","tickformat","avg_type","box_data","x_title","x_tickes","map","getMonth","Array","from","keys","getHours","getDay","outliercolor","boxpoints","boxmode","tickvals","ticktext","trendline","Date","lr","x1","x2","y1","y2","fill","theta","polar","radialaxis","ticksuffix","angle","dtick","angularaxis","direction","high","all","bgcolor","tickwidth","linewidth","layer","data_cal_pscf","data_cal_cpf","measurement","wind","threshold","directions","lower","upper","threshold_conc","sort","a","selected_chemical","max_wind_speed","reduce","prev","curr","wind_speed","cbpf_high","cbpf_all","speed","WD","WS","Dir_index","Level","conc","count_high","count_all","i","wind_direction","find","TimeString","undefined","j","cpf_high","cpf_all","color_map","value","cbpf","c","trace","cliponaxis","res","reverse","cpf","data_cal_windrose","count","wind_F","text","wind_rose","Math","round","data_reduce","data_merge","data_filter","k","filtered","filter","item","includes","data_filter_2","sen_slope","cal_period_avg","period","getDeviation","array","n","mean","date_string","year","getFullYear","month","date","getDate","hour","sum","deviation","getStandardDeviation","sqrt","pow","linearRegression","sum_x","sum_y","sum_xy","sum_xx","sum_yy","slope","min","apply","max","intercept"],"mappings":"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","file":"js/chunk-7201d0ea.1bf1dc2e.js","sourcesContent":["import Plotly from 'plotly.js'\r\n\r\n// import * as d3 from 'd3'\r\n\r\nfunction covert_rgb(hex, alpha) {\r\n    if (hex.length === 3) {\r\n        hex = `${hex[0]}${hex[0]}${hex[1]}${hex[1]}${hex[2]}${hex[2]}`;\r\n    }\r\n\r\n    const r = parseInt(hex.substring(0, 2), 16);\r\n    const g = parseInt(hex.substring(2, 4), 16);\r\n    const b = parseInt(hex.substring(4, 6), 16);\r\n\r\n    return `rgba(${r},${g},${b},${alpha})`;\r\n}\r\n\r\nexport default class PlotCase {\r\n    constructor(case_name) {\r\n        this.case_name = case_name;\r\n\r\n        this.small_fig = { width: 300, height: 180 }\r\n        this.medium_fig = { width: 600, height: 400 }\r\n        this.large_fig = { width: 1180, height: 600 }\r\n\r\n        this.small_margin = { r: 20, t: 25, b: 25, l: 20 }\r\n        this.medium_margin = { r: 20, t: 25, b: 25, l: 20 }\r\n        this.large_margin = { r: 100, t: 50, b: 75, l: 125 }\r\n\r\n        this.color_theme = [\r\n            '1E88E5',\r\n            '28965A',\r\n            'E53E20',\r\n            '7CB342',\r\n            'd95282',\r\n            'FBC02D',\r\n            '00B8DC',\r\n            '232322',\r\n            'AAAAAA',\r\n        ]\r\n\r\n        this.plotly_config = {\r\n            small: {\r\n                displaylogo: false,\r\n                responsive: true,\r\n                displayModeBar: false,\r\n                staticPlot: true\r\n            },\r\n            medium: {\r\n                displaylogo: false,\r\n                responsive: true,\r\n                displayModeBar: false,\r\n                staticPlot: false,\r\n            },\r\n            large: {\r\n                displaylogo: false,\r\n                responsive: true,\r\n                displayModeBar: false,\r\n                staticPlot: false,\r\n                editable: true\r\n            }\r\n        };\r\n\r\n        this.layout_default = {\r\n            small: {\r\n                margin: this.small_margin,\r\n                width: this.small_fig.width,\r\n                height: this.small_fig.height,\r\n                font: { size: 10 },\r\n                showlegend: false,\r\n                autosize: true,\r\n            },\r\n            medium: {\r\n                margin: this.medium_margin,\r\n                width: this.medium_fig.width,\r\n                height: this.medium_fig.height,\r\n                font: { size: 14 },\r\n                showlegend: true,\r\n                legend: { font: { size: 12 }, xanchor: \"auto\", yanchor: \"auto\", x: 1, y: 0 },\r\n                autosize: true,\r\n            },\r\n            large: {\r\n                margin: this.large_margin,\r\n                width: this.large_fig.width,\r\n                height: this.large_fig.height,\r\n                font: { size: 14 },\r\n                showlegend: true,\r\n                legend: { font: { size: 12 }, xanchor: \"auto\", yanchor: \"auto\", x: 1, y: 0 },\r\n                autosize: true,\r\n            }\r\n        }\r\n    }\r\n\r\n    clear(my_div) {\r\n        Plotly.purge(my_div)\r\n    }\r\n\r\n    save_image(my_div, file_name) {\r\n        Plotly.toImage(\r\n            my_div, {\r\n            format: 'png',\r\n            height: 800,\r\n            width: 1200,\r\n        }).then(\r\n            function (url) {\r\n                var pom = document.createElement(\"a\");\r\n                pom.href = url;\r\n                pom.setAttribute(\"download\", file_name+\".png\");\r\n                pom.click();\r\n            });\r\n    }\r\n\r\n    set_fig_size(type, fig_size, fig_margin) {\r\n        // fig_size:{width:100,height:200}\r\n        // fig_margin: { r: 20, t: 25, b: 25, l: 20 }\r\n        if (type == \"small\") {\r\n            this.layout_default.small.width = fig_size.width\r\n            this.layout_default.small.height = fig_size.height\r\n            this.layout_default.small.margin = fig_margin\r\n        }\r\n        else if (type == \"medium\") {\r\n            this.layout_default.medium.width = fig_size.width\r\n            this.layout_default.medium.height = fig_size.height\r\n            this.layout_default.medium.margin = fig_margin\r\n        }\r\n        else {\r\n            this.layout_default.large.width = fig_size.width\r\n            this.layout_default.large.height = fig_size.height\r\n            this.layout_default.large.margin = fig_margin\r\n        }\r\n    }\r\n\r\n    set_layout(type, layout_config) {\r\n        if (type == \"small\") {\r\n            return Object.assign(this.layout_default.small, layout_config)\r\n        }\r\n        else if (type == \"medium\") {\r\n            return Object.assign(this.layout_default.medium, layout_config)\r\n        }\r\n        else {\r\n            return Object.assign(this.layout_default.large, layout_config)\r\n        }\r\n    }\r\n\r\n    set_title(my_div, title) {\r\n        var update = {\r\n            title: title\r\n        }\r\n        Plotly.relayout(my_div, update)\r\n    }\r\n\r\n    plot_hist(my_div, data, type, layout_config = {}) {\r\n        var color_count = 0\r\n        var trace_data = []\r\n        for (const [index, d] of data.entries()) {\r\n            trace_data.push(\r\n                {\r\n                    x: d.x,\r\n                    name: d.chemical,\r\n                    autobinx: true,\r\n                    histnorm: \"count\",\r\n                    marker: {\r\n                        color: covert_rgb(this.color_theme[(index + color_count) % 9], 1),\r\n                        line: {\r\n                            color: covert_rgb(this.color_theme[(index + color_count) % 9], 1),\r\n                            width: 1\r\n                        }\r\n                    },\r\n                    opacity: 0.7,\r\n                    type: \"histogram\",\r\n                })\r\n        }\r\n        var fig_layout_config = {\r\n            bargap: 0.05,\r\n            bargroupgap: 0.2,\r\n            barmode: \"overlay\",\r\n            title: type == \"small\" ? \"\" : \"Histgram\",\r\n            xaxis: type == \"small\" ? {} : { title: \"Value\" },\r\n            yaxis: type == \"small\" ? {} : { title: \"Count\" }\r\n        }\r\n        Object.assign(fig_layout_config, layout_config)\r\n        var layout = this.set_layout(type, fig_layout_config)\r\n        Plotly.newPlot(my_div, trace_data, layout, this.plotly_config[type]);\r\n    }\r\n\r\n    plot_line(my_div, data, type, layout_config = {}) {\r\n        var color_count = 1\r\n        var trace_data = []\r\n        for (const [index, d] of data.entries()) {\r\n            trace_data.push(\r\n                {\r\n                    mode: \"lines\",\r\n                    name: d.chemical,\r\n                    x: d.x,\r\n                    y: d.y,\r\n                    connectgaps: false,\r\n                    line: { color: covert_rgb(this.color_theme[(index + color_count) % 9], 0.7) },\r\n                    marker: {\r\n                        size: type == \"small\" ? 2 : 5,\r\n                        color: covert_rgb(this.color_theme[index], 0.7)\r\n                    },\r\n                }\r\n            )\r\n        }\r\n        var fig_layout_config = {\r\n            title: type == \"small\" ? \"\" : \"Time Series\",\r\n            xaxis: type == \"small\" ? { type: 'date', tickformat: '%b %Y' } : { title: \"Date\", type: 'date', tickformat: '%b-%d %Y' },\r\n            yaxis: type == \"small\" ? {} : { title: \"Conc.\" },\r\n        }\r\n        Object.assign(fig_layout_config, layout_config)\r\n        var layout = this.set_layout(type, fig_layout_config)\r\n\r\n        Plotly.newPlot(my_div, trace_data, layout, this.plotly_config[type]);\r\n    }\r\n\r\n    plot_averaged_box(my_div, data, type, avg_type, layout_config = {}) {\r\n        var box_data = []\r\n        var color = ''\r\n        var title = ''\r\n        var x_title = ''\r\n        var x_tickes = []\r\n\r\n        for (const [index, d] of data.entries()) {\r\n            var trace_data = []\r\n            switch (avg_type) {\r\n                case \"monthly\":\r\n                    trace_data = d.x.map(x => x.getMonth())\r\n                    title = \"Monthly\"\r\n                    x_title = \"month\"\r\n                    color = covert_rgb(this.color_theme[(index + 2) % 9], 0.7)\r\n                    x_tickes = Array.from(Array(12).keys())\r\n                    break\r\n                case \"diel\":\r\n                    trace_data = d.x.map(x => x.getHours())\r\n                    title = \"Diel\"\r\n                    x_title = \"hour\"\r\n                    color = covert_rgb(this.color_theme[(index + 3) % 9], 0.7)\r\n                    x_tickes = Array.from(Array(24).keys())\r\n                    break\r\n                case \"weekday\":\r\n                    trace_data = d.x.map(x => x.getDay())\r\n                    title = \"Weekday\"\r\n                    x_title = \"weekday\"\r\n                    color = covert_rgb(this.color_theme[(index + 4) % 9], 0.7)\r\n                    x_tickes = Array.from(Array(7).keys())\r\n                    break\r\n            }\r\n\r\n            box_data.push({\r\n                x: trace_data,\r\n                y: d.y,\r\n                name: d.chemical,\r\n                marker: {\r\n                    color: color,\r\n                    outliercolor: 'rgba(219, 64, 82, 0.6)',\r\n                    line: {\r\n                        outliercolor: 'rgba(219, 64, 82, 1.0)',\r\n                    }\r\n                },\r\n                type: 'box',\r\n                boxpoints: 'Outliers'\r\n            })\r\n\r\n        }\r\n\r\n        var fig_layout_config = {\r\n            boxmode: 'group',\r\n            title: type == \"small\" ? \"\" : title,\r\n            xaxis: type == \"small\" ? { tickvals: x_tickes, ticktext: x_tickes } : { title: x_title, tickvals: x_tickes, ticktext: x_tickes },\r\n            yaxis: type == \"small\" ? {} : { title: \"Conc.\" },\r\n        }\r\n        Object.assign(fig_layout_config, layout_config)\r\n        var layout = this.set_layout(type, fig_layout_config)\r\n\r\n        Plotly.newPlot(my_div, box_data, layout, this.plotly_config[type]);\r\n    }\r\n\r\n    plot_trend(my_div, data, type, layout_config = {}) {\r\n        var color_count = 5\r\n        var trace_data = []\r\n        for (const [index, d] of data.entries()) {\r\n            trace_data.push(\r\n                {\r\n                    type: \"scatter\",\r\n                    mode: \"markers\",\r\n                    name: d.chemical,\r\n                    x: d.x,\r\n                    y: d.y,\r\n                    connectgaps: false,\r\n                    line: { color: covert_rgb(this.color_theme[(index + color_count) % 9], 0.5) },\r\n                    trendline: 'ols',\r\n                    marker: {\r\n                        size: type == \"small\" ? 2 : 5,\r\n                        color: covert_rgb(this.color_theme[index], 0.7)\r\n                    },\r\n                }\r\n            )\r\n            trace_data.push(\r\n                {\r\n                    type: \"scatter\",\r\n                    mode: \"lines\",\r\n                    name: d.chemical,\r\n                    x: [new Date(d.lr.line.x1), new Date(d.lr.line.x2)],\r\n                    y: [d.lr.line.y1, d.lr.line.y2],\r\n                    connectgaps: false,\r\n                    line: { color: covert_rgb(this.color_theme[(index + color_count) % 9], 1) },\r\n                }\r\n            )\r\n        }\r\n        var fig_layout_config = {\r\n            title: type == \"small\" ? \"\" : \"Trend\",\r\n            xaxis: type == \"small\" ? { type: 'date', tickformat: '%b %Y' } : { title: \"Date\", type: 'date', tickformat: '%b-%d %Y' },\r\n            yaxis: type == \"small\" ? {} : { title: \"Conc.\" },\r\n        }\r\n        Object.assign(fig_layout_config, layout_config)\r\n        var layout = this.set_layout(type, fig_layout_config)\r\n\r\n        Plotly.newPlot(my_div, trace_data, layout, this.plotly_config[type]);\r\n    }\r\n\r\n    plot_windrose(my_div, data, type, layout_config = {}) {\r\n        let d = [\"North\", \"NNE\", \"NE\", \"ENE\", \"East\", \"ESE\", \"SE\", \"SSE\", \"South\", \"SSW\", \"SW\", \"WSW\", \"West\", \"WNS\", \"NW\", \"NNW\"]\r\n\r\n        if (data == null) {\r\n            data = [{\r\n                r: new Array(16).fill(0),\r\n                theta: d,\r\n                type: \"barpolar\"\r\n            },\r\n            ]\r\n        }\r\n\r\n        var fig_layout_config = {\r\n            title: type == \"small\" ? \"\" : \"Wind Rose\",\r\n            polar: {\r\n                barmode: \"overlay\",\r\n                bargap: 0,\r\n                radialaxis: { ticksuffix: \"%\", angle: 45, dtick: 5 },\r\n                angularaxis: { direction: \"clockwise\" },\r\n            }\r\n        }\r\n        Object.assign(fig_layout_config, layout_config)\r\n        var layout = this.set_layout(type, fig_layout_config)\r\n\r\n        Plotly.newPlot(my_div, data, layout, this.plotly_config[type]);\r\n\r\n    }\r\n\r\n    plot_cpf(my_div, data, type, layout_config = {}) {\r\n        var trace_data = [data.high, data.all]\r\n        var fig_layout_config = {\r\n            title: type == \"small\" ? \"\" : \"CPF Analysis\",\r\n            polar: {\r\n                radialaxis: { ticksuffix: \"%\", angle: 45, dtick: 5 },\r\n                angularaxis: { direction: \"clockwise\" },\r\n            }\r\n        }\r\n        Object.assign(fig_layout_config, layout_config)\r\n        var layout = this.set_layout(type, fig_layout_config)\r\n\r\n        Plotly.newPlot(my_div, trace_data, layout, this.plotly_config[type]);\r\n    }\r\n\r\n    plot_cbpf(my_div, data, type, layout_config = {}) {\r\n        var fig_layout_config = {\r\n            title: type == \"small\" ? \"\" : \"CBPF Analysis\",\r\n            polar: {\r\n                bgcolor: '#162876',\r\n                radialaxis: { ticksuffix: \"%\", angle: 45, dtick: 5 },\r\n                angularaxis: {\r\n                    direction: \"clockwise\",\r\n                    tickwidth: 2,\r\n                    linewidth: 3,\r\n                    layer: \"below traces\"\r\n                },\r\n            }\r\n        }\r\n        Object.assign(fig_layout_config, layout_config)\r\n        var layout = this.set_layout(type, fig_layout_config)\r\n\r\n        Plotly.newPlot(my_div, data, layout, this.plotly_config[type]);\r\n    }\r\n}\r\n","export default {\r\n    linearRegression,\r\n    getStandardDeviation,\r\n    cal_period_avg,\r\n    sen_slope,\r\n    data_filter,\r\n    data_reduce,\r\n    data_merge,\r\n    data_cal_windrose,\r\n    data_filter_2,\r\n    data_cal_cpf,\r\n    data_cal_pscf\r\n}\r\n\r\nfunction data_cal_pscf(){\r\n\r\n}\r\n\r\nfunction data_cal_cpf(measurement, wind, threshold = 0.7) {\r\n    var directions = [\r\n        { d: \"N\", lower: 348.75, upper: 11.25 },\r\n        { d: \"NNE\", lower: 11.25, upper: 33.75 },\r\n        { d: \"NE\", lower: 33.75, upper: 56.25 },\r\n        { d: \"ENE\", lower: 56.25, upper: 78.75 },\r\n        { d: \"E\", lower: 78.75, upper: 101.25 },\r\n        { d: \"ESE\", lower: 101.25, upper: 123.75 },\r\n        { d: \"SE\", lower: 123.75, upper: 146.25 },\r\n        { d: \"SSE\", lower: 146.25, upper: 168.75 },\r\n        { d: \"S\", lower: 168.75, upper: 191.25 },\r\n        { d: \"SSW\", lower: 191.25, upper: 213.75 },\r\n        { d: \"SW\", lower: 213.75, upper: 236.25 },\r\n        { d: \"WSW\", lower: 236.25, upper: 258.75 },\r\n        { d: \"W\", lower: 258.75, upper: 281.25 },\r\n        { d: \"WNS\", lower: 281.25, upper: 303.75 },\r\n        { d: \"NW\", lower: 303.75, upper: 326.25 },\r\n        { d: \"NNW\", lower: 326.25, upper: 348.75 }]\r\n\r\n    var threshold_conc = null\r\n    measurement.sort((a, b) => (a.selected_chemical > b.selected_chemical) ? -1 : 1)\r\n    threshold_conc = measurement[parseInt(measurement.length * (1 - threshold))].selected_chemical\r\n    // var max_wind_speed = Math.max(...wind.map(x => x.wind_speed))\r\n    var max_wind_speed = wind.reduce((prev, curr) => curr.wind_speed > prev ? curr.wind_speed : prev, -999)\r\n\r\n    var cbpf_high = Array(parseInt(max_wind_speed) + 1).fill(0)\r\n    var cbpf_all = Array(parseInt(max_wind_speed) + 1).fill(0)\r\n    cbpf_high = cbpf_high.map((x, index) => { return { speed: index + 1, r: Array(16).fill(0) } })\r\n    cbpf_all = cbpf_all.map((x, index) => { return { speed: index + 1, r: Array(16).fill(0) } })\r\n\r\n    var count_high = 0\r\n    var count_all = 0\r\n\r\n    var WD, WS, Dir_index, Level, conc\r\n    for (let i = 0; i < wind.length; i++) {\r\n        WD = wind[i].wind_direction\r\n        WS = wind[i].wind_speed\r\n        conc = measurement.find(x => x.TimeString == wind[i].TimeString)\r\n        if (WD !== null && WS !== null && conc !== undefined) {\r\n            conc = conc.selected_chemical\r\n            if (WD > 348.75) { Dir_index = 0 }\r\n            else {\r\n                for (let j = 1; j < directions.length; j++) {\r\n                    if (WD <= directions[j].upper) {\r\n                        Dir_index = j\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let j = 0; j < cbpf_high.length; j++) {\r\n                if (WS <= cbpf_high[j].speed) {\r\n                    Level = j\r\n                    break;\r\n                }\r\n            }\r\n\r\n            cbpf_all[Level].r[Dir_index] += 1\r\n            count_all += 1\r\n            if (conc > threshold_conc) {\r\n                cbpf_high[Level].r[Dir_index] += 1\r\n                count_high += 1\r\n            }\r\n        }\r\n    }\r\n\r\n    var cpf_high = Array(16).fill(0)\r\n    var cpf_all = Array(16).fill(0)\r\n    for (let i = 0; i < directions.length; i++) {\r\n        for (let j = 0; j < cbpf_high.length; j++) {\r\n            if (cbpf_high[j].r[i] > 0) {\r\n                cpf_high[i] += cbpf_high[j].r[i]\r\n            }\r\n            if (cbpf_all[j].r[i] > 0) {\r\n                cpf_all[i] += cbpf_all[j].r[i]\r\n            }\r\n        }\r\n    }\r\n\r\n    cpf_high = cpf_high.map(x => x / count_high)\r\n    cpf_all = cpf_all.map(x => x / count_all)\r\n    // TODO:\r\n    // - speed up/ avoid ui block\r\n    // - color map \r\n    // - layer order\r\n    var color_map = [\r\n        { value: 0.2, color: '#2F528F' },\r\n        { value: 0.15, color: '#A0DAB7' },\r\n        { value: 0.1, color: '#1F93C0' },\r\n        { value: 0.05, color: '#162876' },\r\n    ]\r\n    const theta = [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNS\", \"NW\", \"NNW\"]\r\n\r\n    var cbpf = []\r\n    for (let c = 0; c < color_map.length; c++) {\r\n        var trace = {\r\n            r: [],\r\n            theta: [],\r\n            type: \"scatterpolargl\",\r\n            mode: \"markers\",\r\n            marker: {\r\n                color: color_map[c].color,\r\n                size: 10 + c * 5,\r\n                line: {\r\n                    color: \"white\"\r\n                },\r\n                opacity: 0.7\r\n            },\r\n            cliponaxis: false\r\n        }\r\n        cbpf.push(trace)\r\n    }\r\n    // console.log(count_high, count_all)\r\n    for (let i = 0; i < cbpf_high.length; i++) {\r\n        for (let j = 1; j < cbpf_high[i].r.length; j++) {\r\n            var value = cbpf_high[i].r[j] / cbpf_all[i].r[j]\r\n            if (value > 0.2) {\r\n                cbpf[0].r.push(i)\r\n                cbpf[0].theta.push(theta[j])\r\n            }\r\n            else if (value > 0.15) {\r\n                cbpf[1].r.push(i)\r\n                cbpf[1].theta.push(theta[j])\r\n            }\r\n            else if (value > 0.1) {\r\n                cbpf[2].r.push(i)\r\n                cbpf[2].theta.push(theta[j])\r\n            }\r\n            else {\r\n                cbpf[3].r.push(i)\r\n                cbpf[3].theta.push(theta[j])\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    // for (let i = 0; i < cbpf_high.length; i++) {\r\n    //     var r = []\r\n    //     for (let j = 1; j < cbpf_high[i].r.length; j++) {\r\n    //         r.push(cbpf_high[i].r[j] / cbpf_all[i].r[j])\r\n    //     }\r\n    //     cbpf.push({\r\n    //         r: r,\r\n    //         theta: theta,\r\n    //         type: \"scatterpolargl\",\r\n    //         mode: \"markers\",\r\n    //         marker: {\r\n    //             color: \"rgb(102,166,30)\",\r\n    //             size: 15,\r\n    //             line: {\r\n    //                 color: \"white\"\r\n    //             },\r\n    //             opacity: 0.7\r\n    //         },\r\n    //         cliponaxis: false\r\n    //     })\r\n    // }\r\n    var res = {\r\n        cbpf: cbpf.reverse(),\r\n        cpf: {\r\n            high: { r: cpf_high, theta: theta, type: 'scatterpolar', fill: 'toself', name: 'High' },\r\n            all: { r: cpf_all, theta: theta, type: 'scatterpolar', fill: 'toself', name: 'All' }\r\n        }\r\n    }\r\n    // console.log(new Date - tic)\r\n    // console.log(res)\r\n    return res\r\n}\r\n\r\nfunction data_cal_windrose(wind) {\r\n    // directions.map((x) => x.d)\r\n    var directions = [\r\n        { d: \"N\", lower: 348.75, upper: 11.25 },\r\n        { d: \"NNE\", lower: 11.25, upper: 33.75 },\r\n        { d: \"NE\", lower: 33.75, upper: 56.25 },\r\n        { d: \"ENE\", lower: 56.25, upper: 78.75 },\r\n        { d: \"E\", lower: 78.75, upper: 101.25 },\r\n        { d: \"ESE\", lower: 101.25, upper: 123.75 },\r\n        { d: \"SE\", lower: 123.75, upper: 146.25 },\r\n        { d: \"SSE\", lower: 146.25, upper: 168.75 },\r\n        { d: \"S\", lower: 168.75, upper: 191.25 },\r\n        { d: \"SSW\", lower: 191.25, upper: 213.75 },\r\n        { d: \"SW\", lower: 213.75, upper: 236.25 },\r\n        { d: \"WSW\", lower: 236.25, upper: 258.75 },\r\n        { d: \"W\", lower: 258.75, upper: 281.25 },\r\n        { d: \"WNS\", lower: 281.25, upper: 303.75 },\r\n        { d: \"NW\", lower: 303.75, upper: 326.25 },\r\n        { d: \"NNW\", lower: 326.25, upper: 348.75 }]\r\n    var count = 0\r\n    var wind_F = [\r\n        { text: \"Calm\", speed: 2, legend: \"<2 m/s\", color: \"#062CFB\", r: Array(16).fill(0) },\r\n        { text: \"Light air\", speed: 6, legend: \"2-6 m/s\", color: \"#17D3FF\", r: Array(16).fill(0) },\r\n        { text: \"Light breeze\", speed: 12, legend: \"6-12 m/s\", color: \"#7DFE7A\", r: Array(16).fill(0) },\r\n        { text: \"Gentle breeze\", speed: 19, legend: \"12-19 m/s\", color: \"#FFE50D\", r: Array(16).fill(0) },\r\n        { text: \"Moderate breeze\", speed: 30, legend: \"19-30 m/s\", color: \"#FFE50D\", r: Array(16).fill(0) },\r\n        { text: \"Fresh\", speed: 40, legend: \"30-40 m/s\", color: \"#810006\", r: Array(16).fill(0) },\r\n        { text: \"strong\", speed: 100, legend: \">40 m/s\", color: \"#810006\", r: Array(16).fill(0) },]\r\n\r\n    // calcualte each bins\r\n    var WD, WS, Dir_index, Level\r\n    for (let i = 0; i < wind.length; i++) {\r\n        WD = wind[i].wind_direction\r\n        WS = wind[i].wind_speed\r\n        if (WD !== null && WS !== null) {\r\n            count += 1\r\n            if (WD > 348.75) { Dir_index = 0 }\r\n            else {\r\n                for (let j = 1; j < directions.length; j++) {\r\n                    if (WD <= directions[j].upper) {\r\n                        Dir_index = j\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let j = 0; j < wind_F.length; j++) {\r\n                if (WS <= wind_F[j].speed) {\r\n                    Level = j\r\n                    break;\r\n                }\r\n            }\r\n            wind_F[Level].r[Dir_index] += 1\r\n        }\r\n    }\r\n    // var calm = 0\r\n    // for (let i = 0; i < directions.length; i++) {\r\n    //     calm += wind_F[0].r[i]\r\n    // }\r\n    // for (let i = 0; i < directions.length; i++) {\r\n    //     wind_F[0].r[i]=calm\r\n    // }\r\n\r\n    for (let i = 0; i < directions.length; i++) {\r\n        for (let j = 1; j < wind_F.length; j++) {\r\n            if (wind_F[j].r[i] > 0) {\r\n                wind_F[j].r[i] += wind_F[j - 1].r[i]\r\n            }\r\n        }\r\n    }\r\n    var wind_rose = []\r\n    for (let i = 0; i < wind_F.length; i++) {\r\n        wind_rose.push({\r\n            r: wind_F[i].r.map((x) => { return Math.round(x / count * 100 * 100) / 100 }),\r\n            theta: [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNS\", \"NW\", \"NNW\"],\r\n            name: wind_F[i].legend,\r\n            marker: { color: wind_F[i].color },\r\n            type: \"barpolar\"\r\n        })\r\n    }\r\n    // console.log(res)\r\n    return wind_rose.reverse()\r\n}\r\n\r\nasync function data_reduce() {\r\n    // return the reduced the data with reduce_func for reduce_col\r\n    // data: app_data.measurement.data\r\n    // reduce_col: \"year\"\r\n    // reduce_func: mean\r\n    // reduced: average conc for each year\r\n\r\n    // data, reduce_col, reduce_func\r\n}\r\n\r\nasync function data_merge() {\r\n    // merge two data with the same timestamp and site\r\n}\r\n\r\nasync function data_filter(data, data_filter) {\r\n    // return filtered data with data_filter\r\n    // data: app_data.measurement.data\r\n    // data_filter: {\"site\":[\"x1\"],\"year\":[\"y1\",\"y2\"]}\r\n    // data and data_filter should have same keys\r\n    // filtered: the measurment data for site x1 at y1 and y2\r\n\r\n    let filtered = data\r\n    for (var k in data_filter) {\r\n        filtered = filtered.filter(item => { return data_filter[k].includes(item[k]) })\r\n    }\r\n    return filtered\r\n\r\n}\r\n\r\nfunction data_filter_2(data, data_filter) {\r\n    // return filtered data with data_filter\r\n    // data: app_data.measurement.data\r\n    // data_filter: {\"site\":[\"x1\"],\"year\":[\"y1\",\"y2\"]}\r\n    // data and data_filter should have same keys\r\n    // filtered: the measurment data for site x1 at y1 and y2\r\n\r\n    let filtered = data\r\n    for (var k in data_filter) {\r\n        filtered = filtered.filter(item => { return data_filter[k].includes(item[k]) })\r\n    }\r\n    return filtered\r\n\r\n}\r\n\r\nfunction sen_slope() {\r\n\r\n\r\n}\r\n\r\nfunction cal_period_avg(data, period) {\r\n    function getDeviation(array) {\r\n        const n = array.length\r\n        const mean = array.reduce((a, b) => a + b) / n\r\n        return array.map(x => (x - mean)*(x - mean)).reduce((a, b) => a + b) / n\r\n    }\r\n    var res = data.reduce((prev, curr) => {\r\n        var year = curr.x.getFullYear()\r\n        var month = curr.x.getMonth() + 1\r\n        var date = curr.x.getDate()\r\n        var hour = curr.x.getHours()\r\n        var date_string\r\n        switch (period) {\r\n            case \"hourly\":\r\n                date_string = year + '-' + month + '-' + date + ' ' + hour\r\n                break\r\n            case \"daily\":\r\n                date_string = year + '-' + month + '-' + date\r\n                break\r\n            case \"monthly\":\r\n                date_string = year + '-' + month\r\n                break\r\n            case \"yearly\":\r\n                date_string = year\r\n                break\r\n        }\r\n\r\n        if (curr.y !== null) {\r\n            if (!prev.date.includes(date_string)) {\r\n                prev.date.push(date_string)\r\n                prev[date_string] = { sum: 0, count: 0, value: [] }\r\n                prev[date_string].sum = curr.y\r\n                prev[date_string].count = 1\r\n                prev[date_string].value.push(curr.y)\r\n            }\r\n            else {\r\n                prev[date_string].sum += curr.y\r\n                prev[date_string].count += 1\r\n                prev[date_string].value.push(curr.y)\r\n            }\r\n        }\r\n        return prev\r\n    }, { date: [] })\r\n    var x = []\r\n    var y = []\r\n    var deviation = []\r\n    for (var i = 0; i < res.date.length; i++) {\r\n        x.push(new Date(res.date[i]))\r\n        y.push(res[res.date[i]].sum / res[res.date[i]].count)\r\n        deviation.push(getDeviation(res[res.date[i]].value))\r\n    }\r\n    return { x: x, y: y, deviation: deviation }\r\n}\r\n\r\nfunction getStandardDeviation(array) {\r\n    const n = array.length\r\n    const mean = array.reduce((a, b) => a + b) / n\r\n    return Math.sqrt(array.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n)\r\n}\r\n\r\nfunction linearRegression(y, x) {\r\n    var lr = {};\r\n    var n = y.length;\r\n    var sum_x = 0;\r\n    var sum_y = 0;\r\n    var sum_xy = 0;\r\n    var sum_xx = 0;\r\n    var sum_yy = 0;\r\n\r\n    for (var i = 0; i < y.length; i++) {\r\n\r\n        sum_x += x[i];\r\n        sum_y += y[i];\r\n        sum_xy += (x[i] * y[i]);\r\n        sum_xx += (x[i] * x[i]);\r\n        sum_yy += (y[i] * y[i]);\r\n    }\r\n\r\n    \r\n    lr['slope'] = (n * sum_xy - sum_x * sum_y) / (n * sum_xx - sum_x * sum_x);\r\n    lr['intercept'] = (sum_y - lr.slope * sum_x) / n;\r\n    lr['r2'] = Math.pow((n * sum_xy - sum_x * sum_y) / Math.sqrt((n * sum_xx - sum_x * sum_x) * (n * sum_yy - sum_y * sum_y)), 2);\r\n    // apply max/min to array as follow to avoid error in web worker\r\n    var min = Math.min.apply(null, x)\r\n    var max = Math.max.apply(null, x)\r\n    lr['line'] = {\r\n        x1: min,\r\n        y1: min * lr.slope + lr.intercept,\r\n        x2: max,\r\n        y2: max * lr.slope + lr.intercept,\r\n    }\r\n    return lr;\r\n}\r\n"],"sourceRoot":""}